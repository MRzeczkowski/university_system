// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversitySystem.Context;

#nullable disable

namespace UniversitySystem.Migrations
{
    [DbContext(typeof(UniversityContext))]
    [Migration("20240621154102_AdjustForIdentity")]
    partial class AdjustForIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniversitySystem.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FlatNumber")
                        .HasColumnType("int");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Addresse__3214EC078ECCD8CD");

                    b.ToTable("Addresses", "Administration");
                });

            modelBuilder.Entity("UniversitySystem.Entities.AdministrativeEmployee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Administ__7AD04F11FCAB43D0");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_AdminEmployees_DepartmentId");

                    b.HasIndex(new[] { "PersonId" }, "idx_AdminEmployees_PersonId");

                    b.ToTable("AdministrativeEmployees", "Administration");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Advisor", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("AssignmentDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "ProfessorId")
                        .HasName("PK__Advisors__BBC51E0DCD97A836");

                    b.HasIndex(new[] { "ProfessorId" }, "idx_Advisors_ProfessorId");

                    b.HasIndex(new[] { "StudentId" }, "idx_Advisors_StudentId");

                    b.ToTable("Advisors", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("DateOfClass")
                        .HasColumnType("date");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id")
                        .HasName("PK__Attendan__3214EC0709E1F83F");

                    b.HasIndex(new[] { "EnrollmentId" }, "idx_Attendance_EnrollmentId");

                    b.HasIndex(new[] { "StatusId" }, "idx_Attendance_StatusId");

                    b.ToTable("Attendance", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.AttendanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PK__Attendan__3214EC075ECE1106");

                    b.ToTable("AttendanceStatuses", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.ClassSession", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__ClassSes__3214EC07AC2FF6BE");

                    b.HasIndex(new[] { "OfferingId", "SessionStart" }, "IDX_ClassSessions_OfferingId_SessionStart");

                    b.ToTable("ClassSessions", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PK__Classroo__3214EC074E426335");

                    b.ToTable("Classrooms", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK__Courses__3214EC07CFA3F6C6");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_Courses_DepartmentId");

                    b.ToTable("Courses", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.CourseOffering", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__CourseOf__3214EC073F1823CA");

                    b.HasIndex(new[] { "ClassroomId" }, "idx_CourseOfferings_ClassroomId");

                    b.HasIndex(new[] { "CourseId" }, "idx_CourseOfferings_CourseId");

                    b.HasIndex(new[] { "ProfessorId" }, "idx_CourseOfferings_ProfessorId");

                    b.HasIndex(new[] { "SemesterId" }, "idx_CourseOfferings_SemesterId");

                    b.ToTable("CourseOfferings", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Dean", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.HasKey("DepartmentId", "ProfessorId")
                        .HasName("PK__Deans__3B07AE79CCBC4B69");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_Deans_DepartmentId");

                    b.HasIndex(new[] { "ProfessorId" }, "idx_Deans_ProfessorId");

                    b.ToTable("Deans", "Administration");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Departme__3214EC07F032CAE9");

                    b.ToTable("Departments", "Administration");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EnrollmentDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OfferingId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Enrollme__3214EC074F200B81");

                    b.HasIndex(new[] { "OfferingId" }, "idx_Enrollments_OfferingId");

                    b.HasIndex(new[] { "StudentId" }, "idx_Enrollments_StudentId");

                    b.ToTable("Enrollments", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Genders__3214EC07084817EC");

                    b.HasIndex(new[] { "Description" }, "UQ__Genders__4EBBBAC9AD1C6B32")
                        .IsUnique();

                    b.ToTable("Genders", "Administration");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("FinalGrade")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateOnly>("GradeDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Grades__3214EC07F23C8620");

                    b.HasIndex(new[] { "EnrollmentId" }, "idx_Grades_EnrollmentId");

                    b.ToTable("Grades", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("char(14)")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK__Persons__3214EC07F320E7FC");

                    b.HasIndex(new[] { "Phone" }, "UQ__Persons__5C7E359ED5D78A15")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Persons__A9D10534C66CDE75")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressId" }, "idx_Persons_AddressId");

                    b.HasIndex(new[] { "GenderId" }, "idx_Persons_GenderId");

                    b.ToTable("Persons", "Administration");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Professo__3214EC072A95EB5C");

                    b.HasIndex(new[] { "DepartmentId" }, "idx_Professors_DepartmentId");

                    b.HasIndex(new[] { "PersonId" }, "idx_Professors_PersonId");

                    b.HasIndex(new[] { "StatusId" }, "idx_Professors_StatusId");

                    b.HasIndex(new[] { "TitleId" }, "idx_Professors_TitleId");

                    b.ToTable("Professors", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.ProfessorStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Professo__3214EC07A8B1CF07");

                    b.ToTable("ProfessorStatuses", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id")
                        .HasName("PK__Semester__3214EC07E9C72386");

                    b.HasIndex(new[] { "Name" }, "UQ__Semester__737584F69C3A9627")
                        .IsUnique();

                    b.ToTable("Semesters", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EnrollmentYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id")
                        .HasName("PK__Students__3214EC0795BD6843");

                    b.HasIndex(new[] { "PersonId" }, "idx_Students_PersonId");

                    b.HasIndex(new[] { "StatusId" }, "idx_Students_StatusId");

                    b.ToTable("Students", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.StudentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__StudentS__3214EC07CA5A0DD8");

                    b.ToTable("StudentStatuses", "Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Title", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Titles__3214EC079638125A");

                    b.HasIndex(new[] { "TitleName" }, "UQ__Titles__252BE89C58ABA3ED")
                        .IsUnique();

                    b.ToTable("Titles", "Academics");
                });

            modelBuilder.Entity("UniversitySystem.Models.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("UniversitySystem.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("UniversitySystem.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("UniversitySystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("UniversitySystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("UniversitySystem.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversitySystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("UniversitySystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversitySystem.Entities.AdministrativeEmployee", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Department", "Department")
                        .WithMany("AdministrativeEmployees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminEmployees_Department");

                    b.HasOne("UniversitySystem.Entities.Person", "Person")
                        .WithMany("AdministrativeEmployees")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminEmployees_Person");

                    b.Navigation("Department");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Advisor", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Professor", "Professor")
                        .WithMany("Advisors")
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK_Advisors_Professor");

                    b.HasOne("UniversitySystem.Entities.Student", "Student")
                        .WithMany("Advisors")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Advisors_Student");

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Attendance", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Enrollment", "Enrollment")
                        .WithMany("Attendances")
                        .HasForeignKey("EnrollmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_Enrollment");

                    b.HasOne("UniversitySystem.Entities.AttendanceStatus", "Status")
                        .WithMany("Attendances")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_Status");

                    b.Navigation("Enrollment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UniversitySystem.Entities.ClassSession", b =>
                {
                    b.HasOne("UniversitySystem.Entities.CourseOffering", "Offering")
                        .WithMany("ClassSessions")
                        .HasForeignKey("OfferingId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassSessions_CourseOfferings");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Course", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversitySystem.Entities.CourseOffering", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Classroom", "Classroom")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("ClassroomId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfferings_Classroom");

                    b.HasOne("UniversitySystem.Entities.Course", "Course")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfferings_Course");

                    b.HasOne("UniversitySystem.Entities.Professor", "Professor")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfferings_Professor");

                    b.HasOne("UniversitySystem.Entities.Semester", "Semester")
                        .WithMany("CourseOfferings")
                        .HasForeignKey("SemesterId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfferings_Semester");

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("Professor");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Dean", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Department", "Department")
                        .WithMany("Deans")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Deans_Department");

                    b.HasOne("UniversitySystem.Entities.Professor", "Professor")
                        .WithMany("Deans")
                        .HasForeignKey("ProfessorId")
                        .IsRequired()
                        .HasConstraintName("FK_Deans_Professor");

                    b.Navigation("Department");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Enrollment", b =>
                {
                    b.HasOne("UniversitySystem.Entities.CourseOffering", "Offering")
                        .WithMany("Enrollments")
                        .HasForeignKey("OfferingId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollments_CourseOffering");

                    b.HasOne("UniversitySystem.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Enrollments_Student");

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Grade", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Enrollment", "Enrollment")
                        .WithMany("Grades")
                        .HasForeignKey("EnrollmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Grades_Enrollment");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Person", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK_Persons_Address");

                    b.HasOne("UniversitySystem.Entities.Gender", "Gender")
                        .WithMany("People")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Persons_Gender");

                    b.Navigation("Address");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Professor", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Department", "Department")
                        .WithMany("Professors")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Professors_Department");

                    b.HasOne("UniversitySystem.Entities.Person", "Person")
                        .WithMany("Professors")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Professors_Person");

                    b.HasOne("UniversitySystem.Entities.ProfessorStatus", "Status")
                        .WithMany("Professors")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Professors_Status");

                    b.HasOne("UniversitySystem.Entities.Title", "Title")
                        .WithMany("Professors")
                        .HasForeignKey("TitleId")
                        .IsRequired()
                        .HasConstraintName("FK_Professors_Title");

                    b.Navigation("Department");

                    b.Navigation("Person");

                    b.Navigation("Status");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Student", b =>
                {
                    b.HasOne("UniversitySystem.Entities.Person", "Person")
                        .WithMany("Students")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Person");

                    b.HasOne("UniversitySystem.Entities.StudentStatus", "Status")
                        .WithMany("Students")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Students_Status");

                    b.Navigation("Person");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Address", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("UniversitySystem.Entities.AttendanceStatus", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Classroom", b =>
                {
                    b.Navigation("CourseOfferings");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Course", b =>
                {
                    b.Navigation("CourseOfferings");
                });

            modelBuilder.Entity("UniversitySystem.Entities.CourseOffering", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Department", b =>
                {
                    b.Navigation("AdministrativeEmployees");

                    b.Navigation("Courses");

                    b.Navigation("Deans");

                    b.Navigation("Professors");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Enrollment", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Gender", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Person", b =>
                {
                    b.Navigation("AdministrativeEmployees");

                    b.Navigation("Professors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Professor", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("CourseOfferings");

                    b.Navigation("Deans");
                });

            modelBuilder.Entity("UniversitySystem.Entities.ProfessorStatus", b =>
                {
                    b.Navigation("Professors");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Semester", b =>
                {
                    b.Navigation("CourseOfferings");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Student", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("UniversitySystem.Entities.StudentStatus", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("UniversitySystem.Entities.Title", b =>
                {
                    b.Navigation("Professors");
                });
#pragma warning restore 612, 618
        }
    }
}
